#!/usr/bin/env python2

# gauge_wave_version_2.rpar

# Parameter file for the gaugewave, all formulations
# Time-stamp: <2014-03-06 10:47:00 (jonah)>

# These are generically what you want for a parameter file
# ----------------------------------------------------------------------
from math import *
import sys
import re
from string import Template
# ----------------------------------------------------------------------

######################################################################
# User-defined parameters
######################################################################
amplitude = 0.5
period = 1.0

# Number of grid points along the propogation axis. The other two axes
# have a trivial number. The minimum number should be 20. Propogation
# is along the x-axis
rho = int(eval("@RHO@")) # number of propogation grid points = 50*rho+1
assert rho >= 2 and "Resolution below rho=2 is unstable"

# Grid parameters
xmin = -0.5
xmax = 0.5

# Whether to evolve the gaugewave on the diagonal or along the x-axis
default_diagonal_value = True
try: # Diagonal accepts either one or zero
    diagonal = bool(int("@DIAGONAL@"))
except:
    diagonal = default_diagonal_value

# Whether checkpointing is on or off
checkpointing = False

dt_factor = 0.25
num_magic_numbers = 2
# No idea why this number is special. Courant limit?
magic_number = 0.5773502691896258
# Timesteps per magic number
timesteps_per_magic_number = 50*rho
# --------------------------------------------------------------------

######################################################################
# Calculations
######################################################################
my_formulation = "@FORMULATION@"
filename = re.sub(r'(.*)\.rpar', r'\1.par', sys.argv[0])
order = 5

ymin = xmin if diagonal else xmin/(2*rho)
ymax = xmax if diagonal else xmax/(2*rho)
zmin = ymin
zmax = ymax
numcells_x = (order+1)*2*rho
numcells_y = numcells_x if diagonal else (order+1)
numcells_z = numcells_y
    
total_iterations = timesteps_per_magic_number*num_magic_numbers
timestep = magic_number/float(timesteps_per_magic_number)
my_final_time = num_magic_numbers*magic_number*period

if diagonal:
    period /= sqrt(3.0)
# Euler rotation angles for the wave
if diagonal:
    # Derived from vectors that rotate [1,0,0] into 1/sqrt(3)*[1,1,1]
    euler_frac = 1.0/13
    euler_shift = 5.0 - 2.0*sqrt(3.0)
    euler_psi = -acos(-sqrt(euler_frac*euler_shift))
    euler_phi = acos(sqrt(euler_frac*euler_shift))
    euler_theta = acos((1.0/6.0)*(3.0 + sqrt(3.0)))
else:
    euler_psi = 0
    euler_phi = 0
    euler_theta = 0


######################################################################
# FORMULATIONS
######################################################################
# Data structure
# ----------------------------------------------------------------------
class Formulation:
    """
    A simple container class for a formulation.
    """
    admbase_stuff=Template("""
ADMBase::evolution_method               = "$name"
ADMBase::lapse_evolution_method         = "$name"
ADMBase::shift_evolution_method         = "$name"
ADMBase::dtlapse_evolution_method       = "$name"
ADMBase::dtshift_evolution_method       = "$name"
""")
    header=Template("""
#############################################################
# $name
#############################################################

""")
    gauge_header="""
# Gauge conditions
"""

    @classmethod
    def make_active_thorns_line(self,string_list):
        "Makes a string list for active thorns"
        outstring = 'ActiveThorns = "\n'
        for i in string_list:
            outstring += "   %s\n" % i
        outstring+='"\n'
        return outstring
    
    def __init__(self,name,
                 active_thorns,
                 evolution_method,
                 gauge_conditions,
                 rest = False):
        self.name = name
        self.active_thorns = self.make_active_thorns_line(active_thorns)
        self.evolution_lines = self.admbase_stuff.substitute(name=evolution_method)
        self.gauge_conditions=self.gauge_header + gauge_conditions
        self.rest = rest

    def make_par_string(self):
        "Makes a string to feed to a parameter file"
        outstring = self.header.substitute(name=self.name)
        outstring += self.active_thorns + '\n'
        outstring += self.evolution_lines + '\n'
        outstring += self.gauge_conditions
        if self.rest:
            outstring += self.rest
            outstring += '\n'
        return outstring
    def __str__(self):
        return self.make_par_string()

# ----------------------------------------------------------------------
# DGFE
# ----------------------------------------------------------------------
DGFE_GAUGE_CONDITIONS="""
CL_BSSN_DG_P5::harmonicN           = 2     # good
CL_BSSN_DG_P5::harmonicF           = 1.0   # good
CL_BSSN_DG_P5::ShiftGammaCoeff     = 0.0
CL_BSSN_DG_P5::BetaDriver          = 1.0
"""

DGFE_EXTRA_PARAMS = """
Carpet::ghost_size                      = 1

# Note that this has to be equal to the hard-coded value
# in CL_BSSN_DG_P5
SDGMGrid::sdgm_order                    = 5

# NaN Checker
NaNChecker::check_every     = 1
NaNChecker::verbose         = "all"
NaNChecker::action_if_found = "terminate"
NaNChecker::check_vars      = "
CL_BSSN_DG_P5::gt11
"

CarpetIOBasic::outInfo_vars         = "
   Carpet::physical_time_per_hour
   SystemStatistics::maxrss_mb
   SystemStatistics::swap_used_mb
   ADMBase::alp
   ADMBase::gxx
"

CarpetIOScalar::outScalar_vars      = "
   ADMBase::alp
   ADMBase::gxx
"

IOASCII::out1D_vars           =" 
  ADMBase::gxx
  CL_BSSN_DG_P5::gt11
  grid::coordinates
"

IOHDF5::out1D_vars           = "
  ADMBase::gxx
  CL_BSSN_DG_P5::gt11
  CL_BSSN_DG_P5::phi
  CL_BSSN_DG_P5::phirhs
  grid::coordinates
"
"""
DGFE = Formulation("DGFE",
                   ["CL_BSSN_DG_P5",
                    "CL_BSSN_DG_P5_Helper",
                    "HRSCCore",
                    "SDGMGrid"],
                   "CL_BSSN_DG_P5",
                   DGFE_GAUGE_CONDITIONS,
                   DGFE_EXTRA_PARAMS)
# ----------------------------------------------------------------------
# Some params used for all finite differences approaches
FINITE_DIFFERENCES_EXTRA_PARAMS="""
Coordinates::outer_boundary_size        = 3 # (order + 1)/2
Carpet::ghost_size                      = 3 # (order + 1)/2

CarpetIOBasic::outInfo_vars         = "
   Carpet::physical_time_per_hour
   SystemStatistics::maxrss_mb
   SystemStatistics::swap_used_mb
   ADMBase::gxx
"

CarpetIOScalar::outScalar_vars      = "
   ADMBase::gxx
"

IOASCII::out1D_vars           =" 
  ADMBase::gxx
  grid::coordinates
"

IOHDF5::out1D_vars           = "
  ADMBase::gxx
  grid::coordinates
"
"""
# ----------------------------------------------------------------------
# BSSN
# ----------------------------------------------------------------------
BSSN_GAUGE_CONDITIONS="""
ML_BSSN::harmonicN           = 2.0    # Harmonic
ML_BSSN::harmonicF           = 1.0    # Harmonic
ML_BSSN::BetaDriver          = 1.0
ML_BSSN::LapseAdvectionCoeff = 1.0
ML_BSSN::ShiftAdvectionCoeff = 1.0
ML_BSSN::MinimumLapse        = 1.0e-8
ML_BSSN::fdOrder             = 4
"""
BSSN_EXTRA_PARAMS = FINITE_DIFFERENCES_EXTRA_PARAMS
BSSN = Formulation("BSSN",
                   ["ML_BSSN","ML_BSSN_Helper"],
                   "ML_BSSN",
                   BSSN_GAUGE_CONDITIONS,
                   BSSN_EXTRA_PARAMS)
# ----------------------------------------------------------------------
# FOBSSN
# ----------------------------------------------------------------------
FOBSSN_GAUGE_CONDITIONS="""
CL_BSSN::harmonicN           = 2.0    # Harmonic
CL_BSSN::harmonicF           = 1.0    # Harmonic
# Set the additional required harmonic gauge conditions here
CL_BSSN::BetaDriver          = 1.0    
CL_BSSN::MinimumLapse        = 1.0e-8
CL_BSSN::fdOrder             = 4
"""
FOBSSN_EXTRA_PARAMS = FINITE_DIFFERENCES_EXTRA_PARAMS
FOBSSN = Formulation("FOBSSN",
                     ["CL_BSSN","CL_BSSN_Helper"],
                     "CL_BSSN",
                     FOBSSN_GAUGE_CONDITIONS,
                     FOBSSN_EXTRA_PARAMS)
# ----------------------------------------------------------------------
# FOZ4
# ----------------------------------------------------------------------
FOZ4_GAUGE_CONDITIONS="""
ML_FOZ4::harmonicN           = 2.0    # Harmonic
ML_FOZ4::harmonicF           = 1.0    # Harmonic
# Set the additional required harmonic gauge conditions here
# ML_FOZ4::BetaDriver          = 1.0    
# ML_FOZ4::LapseAdvectionCoeff = 1.0
# ML_FOZ4::ShiftAdvectionCoeff = 1.0
ML_FOZ4::MinimumLapse        = 1.0e-8
# ML_FOZ4::fdOrder             = 4
""",
FOZ4_EXTRA_PARAMS = FINITE_DIFFERENCES_EXTRA_PARAMS
FOZ4 = Formulation("FOZ4",
                   ["ML_FOZ4","ML_FOZ4_Helper"],
                   "ML_FOZ4",
                   FOZ4_GAUGE_CONDITIONS,
                   FOZ4_EXTRA_PARAMS)

# ----------------------------------------------------------------------
formulations = {'BSSN':BSSN,
                'FOBSSN':FOBSSN,
                'FOZ4':FOZ4,
                'DGFE':DGFE}
# ----------------------------------------------------------------------

# Boiler plate code
# ----------------------------------------------------------------------
BOILER_PLATE_THORNS= """
#############################################################
# Thorns
#############################################################
ActiveThorns = "
  ADMBase
  ADMCoupling
  ADMMacros
  Boundary
  Carpet
  CarpetIOASCII
  CarpetIOBasic
  CarpetIOHDF5
  CarpetIOScalar
  CarpetLib
  CarpetReduce
  CartGrid3d
  CoordGauge
  Coordinates
  GaugeWave
  GenericFD
  IOUtil
  LoopControl
  MoL
  NanChecker
  Periodic
  Slab
  StaticConformal
  SymBase
  Time
  TmunuBase
  SystemStatistics
  hwloc
  SpaceMask
  SphericalSurface
"
"""

BOILER_PLATE_GRID = Template("""
#############################################################
# Grid
#############################################################

Coordinates::coordinate_system          = "Cartesian"
Coordinates::store_jacobian             = no
Coordinates::store_jacobian_derivative  = no
Coordinates::stagger_patch_boundaries   = yes
Coordinates::stagger_outer_boundaries   = yes

Coordinates::patch_xmin                 = $xmin
Coordinates::patch_ymin                 = $ymin
Coordinates::patch_zmin                 = $zmin

Coordinates::patch_xmax                 = $xmax
Coordinates::patch_ymax                 = $ymax
Coordinates::patch_zmax                 = $zmax

Coordinates::ncells_x                   = $numcells_x   # (order+1)*n
Coordinates::ncells_y                   = $numcells_y
Coordinates::ncells_z                   = $numcells_z

CartGrid3D::type                        = "multipatch"
Periodic::periodic = "yes"
Coordinates::register_symmetry = "no"

""").substitute(xmin=xmin,ymin=ymin,zmin=zmin,
                xmax=xmax,ymax=ymax,zmax=zmax,
                numcells_x=numcells_x,
                numcells_y=numcells_y,
                numcells_z=numcells_z)
                

BOILER_PLATE_CARPET = """
#############################################################
# Carpet
#############################################################

Carpet::granularity                     = 6   # order+1
Carpet::granularity_boundary            = 1
Carpet::domain_from_multipatch          = "yes"
Carpet::max_refinement_levels           = 1
Carpet::num_integrator_substeps         = 4
Carpet::output_timer_tree_every         = 1
LoopControl::verbose                    = no
"""

BOILER_PLATE_TIME_INTEGRATION = Template("""
#############################################################
# Time integration
#############################################################

# Cactus::terminate                       = "time"
# Cactus::cctk_final_time                 = $final
# 
# MoL::ODE_Method                         = "RK4"
# MoL::MoL_Intermediate_Steps             = 4
# MoL::MoL_Num_Scratch_Levels             = 1
# 
# Time::dtfac                             = $dt_factor

Cactus::terminate                     = "iteration"
Cactus::cctk_itlast = $total_iterations

Time::timestep_method                 = "given"
Time::timestep                        = $timestep

MethodOfLines::ode_method             = "RK4"
MethodOfLines::MoL_Intermediate_Steps = 4
MethodOfLines::MoL_Num_Scratch_Levels = 1

MethodOfLines::MoL_NaN_Check          = "yes"
""").substitute(dt_factor=dt_factor,final=my_final_time,
                timestep=timestep,total_iterations=total_iterations)

BOILER_PLATE_INITIAL_DATA = Template("""
#############################################################
# Initial data
#############################################################

ADMBase::initial_data                = "GaugeWave"
ADMBase::initial_lapse               = "GaugeWave"
ADMBase::initial_shift               = "GaugeWave"
ADMBase::initial_dtlapse             = "GaugeWave"
ADMBase::initial_dtshift             = "GaugeWave"

GaugeWave::amp                          = $amplitude
GaugeWave::period                       = $period

GaugeWave::psi = $psi
GaugeWave::theta = $theta
GaugeWave::phi = $phi
""").substitute(amplitude=amplitude,period=period,
                psi=euler_psi,theta=euler_theta,phi=euler_phi)

BOILER_PLATE_CHECKPOINTING = """
#############################################################
# Checkpointing and recovery
#############################################################

CarpetIOHDF5::checkpoint                    = %s
IO::checkpoint_ID                           = no
IO::recover                                 = "autoprobe"
IO::checkpoint_every_walltime_hours         = 3
IO::out_proc_every                          = 2
IO::checkpoint_keep                         = 1
IO::checkpoint_on_terminate                 = yes
IO::checkpoint_dir                          = "../checkpoints"
IO::recover_dir                             = "../checkpoints"
IO::abort_on_io_errors                      = yes
CarpetIOHDF5::open_one_input_file_at_a_time = yes
""" % ("yes" if checkpointing else "no")

BOILER_PLATE_OUTPUT = """
#############################################################
# Output
#############################################################

IO::out_dir                   = $parfile
IO::out_fileinfo              = "all"

CarpetIOBasic::outInfo_every        = 10 # 15
CarpetIOBasic::outInfo_reductions   = "norm2 maximum minimum"
CarpetIOScalar::outScalar_every     = 10 # 15
CarpetIOScalar::one_file_per_group  = yes
CarpetIOScalar::outScalar_reductions = "minimum maximum norm2 norm_inf"
IOASCII::out_precision = 17
IOASCII::out1D_every          = 10 # 15
IOASCII::one_file_per_group   = yes
IOHDF5::out1D_every          = 10 # 15
IOHDF5::one_file_per_group   = yes

"""

par_string = BOILER_PLATE_THORNS\
    + BOILER_PLATE_CARPET\
    + BOILER_PLATE_GRID\
    + BOILER_PLATE_TIME_INTEGRATION\
    + BOILER_PLATE_INITIAL_DATA\
    + str(formulations[my_formulation])\
    + BOILER_PLATE_CHECKPOINTING\
    + BOILER_PLATE_OUTPUT

with open(filename,'w') as f:
    f.write(par_string)
