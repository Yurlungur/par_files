#!/usr/bin/env python2

# robust_stability.rpar

# Parameter file for the gaugewave, all formulations
# Time-stamp: <2015-11-09 10:04:45 (jmiller)>

# These are generically what you want for a parameter file
# ----------------------------------------------------------------------
from math import *
import sys
import re
from string import Template
# ----------------------------------------------------------------------


######################################################################
# User-defined parameters
######################################################################
# The order of the method
default_order = 4
try:
    order = int(eval("@ORDER@"))
except:
    order = default_order

# Number of grid points along the propogation axes.
# The minimum number should be 20.
rho = int(eval("@RHO@")) # number of propogation grid points = (order+1)*rho

# The amplitude of the noise depends on the order of the method and
# the number of elements. We want to reduce the amount of noise by the
# square (to stay quadratic in the Hamiltonian constraint) when we
# refine for both systems. For p-refinement, I recomend using a small rho.
order_ratio = order/float(default_order)
amplitude = 256*1e-10/((rho**2)*(order_ratio**2))
period = 1

# Grid parameters
xmin = -0.5
xmax = 0.5

# Whether checkpointing is on or off
checkpointing = False
# Whether or not to use dissipation
using_dissipation=False

# Number of periods
default_num_periods = 100
try:
    num_periods = int(eval("@PERIODS@"))
except:
    num_periods = default_num_periods

# Courant number is different (but maybe we want them to be the same for comparison sake?)
fd_dt_factor = 0.1
# In general CFL factor for DG scales as 1/(2*order+1)
dgfe_dt_factor = np.min(0.05,0.45/(2*order+1))

######################################################################
# Calculations
######################################################################
my_formulation = "@FORMULATION@"
filename = re.sub(r'(.*)\.rpar', r'\1.par', sys.argv[0])

numcells_x = (order+1)*rho
numcells_y = numcells_x 
numcells_z = numcells_y
dx = abs(xmax-xmin)/numcells_x

# If we are using a finite differences approach, xmin can't actually
# be xmin. We need to shift it by the lattice spacing.
if "DGFE" not in my_formulation:
    xmin += dx/2.0
    xmax += dx/2.0
    using_dissipation = False
    dt_factor = fd_dt_factor
else:
    dt_factor = dgfe_dt_factor

ymin = xmin 
ymax = xmax 
zmin = ymin
zmax = ymax
    
my_final_time = num_periods * period
dissipation_epsilon = 0.1 if using_dissipation else 0

######################################################################
# FORMULATIONS
######################################################################
# Data structure
# ----------------------------------------------------------------------
class Formulation:
    """
    A simple container class for a formulation.
    """
    admbase_stuff=Template("""
ADMBase::evolution_method               = "$name"
ADMBase::lapse_evolution_method         = "$name"
ADMBase::shift_evolution_method         = "$name"
ADMBase::dtlapse_evolution_method       = "$name"
ADMBase::dtshift_evolution_method       = "$name"
""")
    header=Template("""
#############################################################
# $name
#############################################################

""")
    gauge_header="""
# Gauge conditions
"""

    @classmethod
    def make_active_thorns_line(self,string_list):
        "Makes a string list for active thorns"
        outstring = 'ActiveThorns = "\n'
        for i in string_list:
            outstring += "   %s\n" % i
        outstring+='"\n'
        return outstring
    
    def __init__(self,name,
                 active_thorns,
                 evolution_method,
                 gauge_conditions,
                 rest = False):
        self.name = name
        self.active_thorns = self.make_active_thorns_line(active_thorns)
        self.evolution_lines = self.admbase_stuff.substitute(name=evolution_method)
        self.gauge_conditions=self.gauge_header + gauge_conditions
        self.rest = rest

    def make_par_string(self):
        "Makes a string to feed to a parameter file"
        outstring = self.header.substitute(name=self.name)
        outstring += self.active_thorns + '\n'
        outstring += self.evolution_lines + '\n'
        outstring += self.gauge_conditions
        if self.rest:
            outstring += self.rest
            outstring += '\n'
        return outstring
    def __str__(self):
        return self.make_par_string()
# ----------------------------------------------------------------------
# Some params used in all finite differences approaches
# ----------------------------------------------------------------------
FINITE_DIFFERENCES_EXTRA_PARAMS=Template("""
Coordinates::outer_boundary_size        = $outer_boundary_size # order/2+1
Carpet::ghost_size                      = $ghost_size # order/2+1
""").substitute(outer_boundary_size=order/2+1,ghost_size=order/2+1)
# ----------------------------------------------------------------------
# FD_BSSN
# ----------------------------------------------------------------------
FD_BSSN_GAUGE_CONDITIONS="""
ML_BSSN::harmonicN           = 1      # 1+log
ML_BSSN::harmonicF           = 2.0    # 1+log
ML_BSSN::harmonicShift       = 0      # gamma driver
ML_BSSN::ShiftGammaCoeff     = 0.75
ML_BSSN::BetaDriver          = 1.0
ML_BSSN::LapseAdvectionCoeff = 1.0
ML_BSSN::ShiftAdvectionCoeff = 1.0
ML_BSSN::MinimumLapse        = 0.0
ML_BSSN::conformalMethod     = 1 # 1 for W, 0 for phi
ML_BSSN::apply_dissipation   = never
ML_BSSN::dt_lapse_shift_method = "noLapseShiftAdvection"
ML_BSSN::fdOrder             = 4
"""
FD_BSSN_DISSIPATION_PARAMS = Template("""
Dissipation::epsdis = $dissipation_epsilon
Dissipation::order  = 5
Dissipation::vars   = "
   ML_BSSN::ML_log_confac
   ML_BSSN::ML_metric
   ML_BSSN::ML_trace_curv
   ML_BSSN::ML_curv
   ML_BSSN::ML_Gamma
   ML_BSSN::ML_lapse
   ML_BSSN::ML_shift
   ML_BSSN::ML_dtlapse
   ML_BSSN::ML_dtshift
"
""").substitute(dissipation_epsilon=dissipation_epsilon)
FD_BSSN_EXTRA_PARAMS = """
CarpetIOBasic::outInfo_vars         = "
   Carpet::physical_time_per_hour
   SystemStatistics::maxrss_mb
   SystemStatistics::swap_used_mb
   ADMBase::gxy
   ML_BSSN::H
"

CarpetIOScalar::outScalar_vars      = "
   ADMBase::gxy
   ADMBase::lapse
   ADMBase::shift
   grid::coordinates
   ML_BSSN::H
"

IOASCII::out1D_vars           =" 
   ADMBase::gxy
   ADMBase::lapse
   ADMBase::shift
   grid::coordinates
"

IOHDF5::out1D_vars           = "
  ADMBase::gxy
  grid::coordinates
"

IOHDF5::out3D_vars           = "
  ADMBase::metric
  grid::coordinates
"
"""
FD_BSSN_EXTRA_PARAMS += FINITE_DIFFERENCES_EXTRA_PARAMS + FD_BSSN_DISSIPATION_PARAMS
FD_BSSN = Formulation("FD_BSSN",
                   ["ML_BSSN","ML_BSSN_Helper","Dissipation"],
                   "ML_BSSN",
                   FD_BSSN_GAUGE_CONDITIONS,
                   FD_BSSN_EXTRA_PARAMS)
# ----------------------------------------------------------------------
# FD_FOBSSN
# ----------------------------------------------------------------------
FD_FOBSSN_GAUGE_CONDITIONS="""
CL_BSSN::harmonicN           = 1      # 1+log
CL_BSSN::harmonicF           = 2.0    # 1+log
CL_BSSN::harmonicShift       = 0      # gamma driver
CL_BSSN::ShiftGammaCoeff     = 0.75
CL_BSSN::BetaDriver          = 1.0
CL_BSSN::MinimumLapse        = 0.0
CL_BSSN::fdOrder             = 4

"""
FD_FOBSSN_DISSIPATION_PARAMS=Template("""
Dissipation::epsdis = $dissipation_epsilon
Dissipation::order = 5
Dissipation::vars  = "
   CL_BSSN::CL_log_confac
   CL_BSSN::CL_metric
   CL_BSSN::CL_trace_curv
   CL_BSSN::CL_curv
   CL_BSSN::CL_Gamma
   CL_BSSN::CL_lapse
   CL_BSSN::CL_shift
   CL_BSSN::CL_dtshift
   CL_BSSN::CL_dlog_confac
   CL_BSSN::CL_dmetric
   CL_BSSN::CL_dlapse
   CL_BSSN::CL_dshift
"
""").substitute(dissipation_epsilon=dissipation_epsilon)
FD_FOBSSN_EXTRA_PARAMS = """
CarpetIOBasic::outInfo_vars         = "
   Carpet::physical_time_per_hour
   SystemStatistics::maxrss_mb
   SystemStatistics::swap_used_mb
   ADMBase::gxy
   CL_BSSN::H
"

CarpetIOScalar::outScalar_vars      = "
   ADMBase::gxy
   ADMBase::lapse
   ADMBase::shift
   grid::coordinates
   CL_BSSN::H
"

IOASCII::out1D_vars           =" 
   ADMBase::gxy
   ADMBase::lapse
   ADMBase::shift
   grid::coordinates
"

IOHDF5::out1D_vars           = "
  ADMBase::gxy
  grid::coordinates
"

IOHDF5::out3D_vars           = "
  ADMBase::metric
  grid::coordinates
"
"""
FD_FOBSSN_EXTRA_PARAMS += FINITE_DIFFERENCES_EXTRA_PARAMS + FD_FOBSSN_DISSIPATION_PARAMS
FD_FOBSSN = Formulation("FD_FOBSSN",
                     ["CL_BSSN","CL_BSSN_Helper","Dissipation"],
                     "CL_BSSN",
                     FD_FOBSSN_GAUGE_CONDITIONS,
                     FD_FOBSSN_EXTRA_PARAMS)
# ----------------------------------------------------------------------
# DGFE_FOBSSN
# ----------------------------------------------------------------------
DGFE_FOBSSN_GAUGE_CONDITIONS = """
CL_BSSN_DG_P4::harmonicN           = 1     # 1+log
CL_BSSN_DG_P4::harmonicF           = 2.0   # 1+log
CL_BSSN_DG_P4::ShiftGammaCoeff     = 0.0
CL_BSSN_DG_P4::BetaDriver          = 1.0
"""

DGFE_FOBSSN_EXTRA_PARAMS = Template("""
# Extra grid information
Carpet::ghost_size                      = 1
Carpet::granularity                     = $order_plus_one # order+1
Carpet::granularity_boundary            = 1

# Note that this has to be equal to the hard-coded value
# in CL_BSSN_DG_P4
SDGMGrid::sdgm_order                    = $order
HRSCCore::legendre_order                = $order

# NaN Checker
NaNChecker::check_every     = 1
NaNChecker::verbose         = "all"
NaNChecker::action_if_found = "terminate"
NaNChecker::check_vars      = "
CL_BSSN_DG_P4::gt11
"

CarpetIOBasic::outInfo_vars         = "
   Carpet::physical_time_per_hour
   SystemStatistics::maxrss_mb
   SystemStatistics::swap_used_mb
   ADMBase::gxy
   CL_BSSN_DG_P4::H
"

CarpetIOScalar::outScalar_vars      = "
   ADMBase::alp
   ADMBase::gxy
   ADMBase::lapse
   ADMBase::shift
   grid::coordinates
   CL_BSSN_DG_P4::H
"

IOASCII::out1D_vars           =" 
   ADMBase::gxy
   ADMBase::lapse
   ADMBase::shift
   CL_BSSN_DG_P4::gt11
   grid::coordinates
"

IOHDF5::out1D_vars           = "
  ADMBase::gxy
  ADMBase::lapse
  ADMBase::shift
  CL_BSSN_DG_P4::gt11
  CL_BSSN_DG_P4::phi
  CL_BSSN_DG_P4::phirhs
  grid::coordinates
"

IOHDF5::out3D_vars           = "
  ADMBase::metric
  grid::coordinates
"
""").substitute(order_plus_one=order+1,order=order)

DGFE_FOBSSN = Formulation("DGFE_FOBSSN",
                   ["CL_BSSN_DG_P4",
                    "CL_BSSN_DG_P4_Helper",
                    "HRSCCore",
                    "SDGMGrid"],
                   "CL_BSSN_DG_P4",
                   DGFE_FOBSSN_GAUGE_CONDITIONS,
                   DGFE_FOBSSN_EXTRA_PARAMS)
# ----------------------------------------------------------------------
# DGFE_BSSN
# ----------------------------------------------------------------------
DGFE_BSSN_GAUGE_CONDITIONS = Template("""
ML_BSSN_DG${order}::harmonicN           = 1     # 1+log
ML_BSSN_DG${order}::harmonicF           = 2.0   # 1+log
ML_BSSN_DG${order}::shiftFormulation    = 0     # 1+log
ML_BSSN_DG${order}::ShiftGammaCoeff     = 0.75
ML_BSSN_DG${order}::BetaDriver          = 1.0
ML_BSSN_DG${order}::advectLapse         = 1
ML_BSSN_DG${order}::advectShift         = 1
ML_BSSN_DG${order}::minimumLapse        = 0.0
ML_BSSN_DG${order}::conformalMethod     = 1
ML_BSSN_DG${order}::epsDiss             = 0.0
ML_BSSN_DG${order}::epsJump             = 0.0
""").substitute(order=order)

DGFE_BSSN_EXTRA_PARAMS = Template("""
# Extra grid information
ML_BSSN_DG${order}::tile_size = $order_plus_one   # order+1

Carpet::ghost_size                      = 1
Carpet::granularity                     = $order_plus_one # order+1
Carpet::granularity_boundary            = 1
Carpet::poison_new_timelevels           = no  # does not work with persistent RHS

# Extra MoL
MethodOfLines::init_RHS_zero = no

# Extra initial data
ML_BSSN_DG${order}::initial_boundary_condition = "Minkowski"   # can't extrapolate
ML_BSSN_DG${order}::rhs_boundary_condition     = "zero"        # newrad doesn't work

# NaN Checker
NaNChecker::check_every     = 1
NaNChecker::verbose         = "all"
NaNChecker::action_if_found = "terminate"
NaNChecker::check_vars      = "
ML_BSSN_DG${order}::gt11
"

CarpetIOBasic::outInfo_vars         = "
   Carpet::physical_time_per_hour
   SystemStatistics::maxrss_mb
   SystemStatistics::swap_used_mb
   ADMBase::gxy
   ML_BSSN_DG${order}::H
"

CarpetIOScalar::outScalar_vars      = "
   ADMBase::alp
   ADMBase::gxy
   ADMBase::lapse
   ADMBase::shift
   ML_BSSN_DG${order}::H
   grid::coordinates
"

IOASCII::out1D_vars           =" 
   ADMBase::gxy
   ADMBase::lapse
   ADMBase::shift
   ML_BSSN_DG${order}::gt11
   grid::coordinates
"

IOHDF5::out1D_vars           = "
  ADMBase::gxy
  ADMBase::lapse
  ADMBase::shift
  grid::coordinates
"

IOHDF5::out3D_vars           = "
  ADMBase::metric
  grid::coordinates
"
""").substitute(order_plus_one=order+1,order=order)

DGFE_BSSN = Formulation("DGFE_BSSN",
                        ["ML_BSSN_DG%s" % order],
                        "ML_BSSN_DG%s" % order,
                        DGFE_BSSN_GAUGE_CONDITIONS,
                        DGFE_BSSN_EXTRA_PARAMS)

# ----------------------------------------------------------------------
formulations = {'FD_FOBSSN':FD_FOBSSN,
                'FD_BSSN':FD_BSSN,
                'DGFE_FOBSSN':DGFE_FOBSSN,
                'DGFE_BSSN':DGFE_BSSN}
# ----------------------------------------------------------------------


######################################################################
# Code
######################################################################
BOILER_PLATE_THORNS= """
#############################################################
# Thorns
#############################################################
ActiveThorns = "
  ADMBase
  ADMCoupling
  ADMMacros
  Boundary
  Carpet
  CarpetIOASCII
  CarpetIOBasic
  CarpetIOHDF5
  CarpetIOScalar
  CarpetLib
  CarpetReduce
  CartGrid3d
  CoordGauge
  Coordinates
  GenericFD
  Formaline
  hwloc
  IOUtil
  LoopControl
  Minkowski
  MoL
  NanChecker
  Noise
  Periodic
  Slab
  StaticConformal
  SpaceMask
  SphericalSurface
  SymBase
  SystemStatistics
  Time
  TmunuBase
"
"""


BOILER_PLATE_GRID = Template("""
#############################################################
# Grid
#############################################################

Coordinates::coordinate_system          = "Cartesian"

Coordinates::store_jacobian             = no
Coordinates::store_jacobian_derivative  = no
Coordinates::store_inverse_jacobian     = no
Coordinates::store_volume_form          = no

Coordinates::patch_xmin                 = $xmin
Coordinates::patch_ymin                 = $ymin
Coordinates::patch_zmin                 = $zmin

Coordinates::patch_xmax                 = $xmax
Coordinates::patch_ymax                 = $ymax
Coordinates::patch_zmax                 = $zmax

Coordinates::ncells_x                   = $numcells_x   # (order+1)*n
Coordinates::ncells_y                   = $numcells_y
Coordinates::ncells_z                   = $numcells_z

Coordinates::stagger_patch_boundaries   = yes
Coordinates::stagger_outer_boundaries   = yes
Coordinates::shiftout_outer_boundaries  = 0

CartGrid3D::type                        = "multipatch"
Periodic::periodic = "yes"
Coordinates::register_symmetry = "no"

""").substitute(xmin=xmin,ymin=ymin,zmin=zmin,
                xmax=xmax,ymax=ymax,zmax=zmax,
                numcells_x=numcells_x,
                numcells_y=numcells_y,
                numcells_z=numcells_z)

BOILER_PLATE_CARPET = """
#############################################################
# Carpet
#############################################################

Carpet::domain_from_multipatch          = "yes"
Carpet::max_refinement_levels           = 1
Carpet::num_integrator_substeps         = 4
"""

BOILER_PLATE_TIME_INTEGRATION = Template("""
#############################################################
# Time integration
#############################################################

Cactus::terminate                       = "time"
Cactus::cctk_final_time                 = $final

MoL::ODE_Method                         = "RK87"
MoL::MoL_Intermediate_Steps             = 13
MoL::MoL_Num_Scratch_Levels             = 13

Time::dtfac                             = $dt_factor

MethodOfLines::MoL_NaN_Check          = "yes"
""").substitute(dt_factor=dt_factor,final=my_final_time)

BOILER_PLATE_INITIAL_DATA = Template("""
#############################################################
# Initial condition
#############################################################
ADMBase::initial_data = "Minkowski"
ADMBase::initial_lapse = "Minkowski"
ADMBase::initial_shift = "Minkowski"
ADMBase::initial_dtlapse = "Minkowski"
ADMBase::initial_dtshift = "Minkowski"

Noise::apply_id_noise = yes
Noise::Amplitude = $amplitude
Noise::id_vars = "
   ADMBase::metric
   ADMBase::curv
   ADMBase::lapse
   ADMBase::shift
   ADMBase::dtlapse
   ADMBase::dtshift
"
""").substitute(amplitude=amplitude)

BOILER_PLATE_CHECKPOINTING = """
#############################################################
# Checkpointing and recovery
#############################################################

CarpetIOHDF5::checkpoint                    = %s
IO::checkpoint_ID                           = no
IO::recover                                 = "autoprobe"
IO::checkpoint_every_walltime_hours         = 3
IO::out_proc_every                          = 2
IO::checkpoint_keep                         = 1
IO::checkpoint_on_terminate                 = yes
IO::checkpoint_dir                          = "../checkpoints"
IO::recover_dir                             = "../checkpoints"
IO::abort_on_io_errors                      = yes
CarpetIOHDF5::open_one_input_file_at_a_time = yes
""" % ("yes" if checkpointing else "no")

BOILER_PLATE_OUTPUT = """
#############################################################
# Output
#############################################################

IO::out_dir                   = $parfile
IO::out_fileinfo              = "all"

CarpetIOBasic::outInfo_every        = 50
CarpetIOBasic::outInfo_reductions   = "norm2 maximum minimum"
CarpetIOScalar::outScalar_every     = 50
CarpetIOScalar::one_file_per_group  = yes
CarpetIOScalar::outScalar_reductions = "minimum maximum norm2 norm_inf"
IOASCII::out_precision = 17
IOASCII::out1D_every          = 50
IOASCII::one_file_per_group   = yes
IOHDF5::out1D_every          = 50
IOHDF5::out3D_every          = 50
IOHDF5::one_file_per_group   = yes

# IOHDF5::output_symmetry_points = yes
# IOHDF5::out3D_ghosts           = yes
# IOHDF5::out3D_outer_ghosts     = yes
"""


par_string = BOILER_PLATE_THORNS\
    + BOILER_PLATE_CARPET\
    + BOILER_PLATE_GRID\
    + BOILER_PLATE_TIME_INTEGRATION\
    + BOILER_PLATE_INITIAL_DATA\
    + str(formulations[my_formulation])\
    + BOILER_PLATE_CHECKPOINTING\
    + BOILER_PLATE_OUTPUT

with open(filename,'w') as f:
    f.write(par_string)
